# ------------------------------------------------ #
# !!!   THIS FILE WAS GENERATED BY GRAPHQL     !!! #
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF    !!! #
#             Version: 1.0.0                       #
# ------------------------------------------------ #

type Query {
    currentUser: UserType
    categories: [CategoryType!]!
    category(args: CategoryArgs!): CategoryType
    transactions(args: TransactionsArgs): [TransactionType!]!
}

type UserType implements BaseType {
    id: ID!
    currency: String!
    email: String!
    firstName: String!
    lastName: String!
}

interface BaseType {
    id: ID!
}

type CategoryType implements BaseType {
    id: ID!
    color: String!
    icon: String!
    keywords: [KeywordType!]!
    name: String!
}

type KeywordType implements BaseType {
    id: ID!
    name: String!
}

input CategoryArgs {
    id: ID!
}

type TransactionType implements BaseType {
    id: ID!
    amount: AmountType!
    category: CategoryType
    currency: String!
    date: DateTime!
    description: String!
    reference: String!
    status: TransactionStatusEnum!
}

type AmountType {
    converted: Float!
    original: Float!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

enum TransactionStatusEnum {
    DISCARDED
    DONE
    SKIPPED
}

input TransactionsArgs {
    categoryId: String
    endDate: DateTime
    startDate: DateTime
}

type Mutation {
    loginUser(input: LoginUserInput!): LoginUserPayload!
    updateUser(input: UpdateUserInput!): UpdateUserPayload!
    createCategory(input: CreateCategoryInput!): CreateCategoryPayload!
    deleteCategory(input: DeleteCategoryInput!): DeleteCategoryPayload!
    updateCategory(input: UpdateCategoryInput!): UpdateCategoryPayload!
    createTransaction(input: CreateTransactionInput!): CreateTransactionPayload!
    discardTransaction(input: DiscardTransactionInput!): DiscardTransactionPayload!
    updateTransaction(input: UpdateTransactionInput!): UpdateTransactionPayload!
}

type LoginUserPayload {
    token: String!
    user: UserType!
}

input LoginUserInput {
    email: String!
    password: String!
}

type UpdateUserPayload {
    user: UserType!
}

input UpdateUserInput {
    currency: String!
    email: String!
    firstName: String!
    id: ID!
    lastName: String!
}

type CreateCategoryPayload {
    category: CategoryType!
}

input CreateCategoryInput {
    color: String!
    icon: String!
    keywords: [String!]!
    name: String!
}

type DeleteCategoryPayload {
    id: ID!
}

input DeleteCategoryInput {
    id: ID!
}

type UpdateCategoryPayload {
    category: CategoryType!
}

input UpdateCategoryInput {
    color: String!
    icon: String!
    id: ID!
    keywords: [UpdateKeywordInput!]!
    name: String!
}

input UpdateKeywordInput {
    id: ID!
    name: String!
}

type CreateTransactionPayload {
    transaction: TransactionType!
}

input CreateTransactionInput {
    amount: Float!
    categoryId: String
    currency: String!
    date: String!
    description: String!
    reference: String!
    status: TransactionStatusEnum!
}

type DiscardTransactionPayload {
    transaction: TransactionType!
}

input DiscardTransactionInput {
    id: ID!
}

type UpdateTransactionPayload {
    transaction: TransactionType!
}

input UpdateTransactionInput {
    amount: Float!
    categoryId: ID
    currency: String!
    date: String!
    description: String!
    id: ID!
    status: TransactionStatusEnum!
}
